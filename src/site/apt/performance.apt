    ---
    Performance
    ---
    ---
    ---

Performance tuning report

* Test design

 In making the right decision about tuning the application performance it is important first to define the usage scenarios in which the program will be intensively exercised. Then through measurements the baseline performance is created against which any tuning efforts are checked. 

 The JMS broker system consists of a central server sending updates to many web applications, which then forward the messages through HTTP responses to web browsers. The server is responsible for communication with a varying number of clients, but it is not expected that there will be more than a handful connected at any given moment. The real load is taken by the web applications which have to endure constant polling for stock data from the web browsers. 

 A typical browser session consists of:

    * A log in

    * A long session of viewing the stock data, which generates timed requests (every 1s) to retrieve stock data

    * A log out

 Polling requests are the most frequently issued and therefore important action. Therefore the test plan consists of:

    * Showing the login screen (login.htm)

    * Logging in (j_spring_security_check)

    * Showing the index page (index.htm)

    * Polling for stock data 100 times (data.json)

    * Logging out (logout.htm)

 All of the different actions can be timed separately in a {{{./files/data.jmx}JMeter test plan}}.

* Measurements taken before tuning

 Measurements have been taken using 10 threads, each looped 20 times. Server-side was set up using apache proxy. CPU time was divided between jmeter and tomcat as 1:3. Kernel time and apache time were neglible. The test machine was a laptop, so the results were dependent on the CPU temperature. The measurements represent the best attempt to use steady test conditions w.r.t. temperature and server steady state (done by running whole test twice and discarding first run results.

*------------------------+--------:--------:--------:--------:--------:--------:
||Page name              |requests||avg    ||med    ||90%    ||min    ||max    |
*------------------------+--------:--------:--------:--------:--------:--------:
|login.htm               |200     |2       |2       |4       |1       |9       |
*------------------------+--------:--------:--------:--------:--------:--------:
|j_spring_security_check |200     |62      |59      |84      |24      |399     |
*------------------------+--------:--------:--------:--------:--------:--------:
|index.htm               |200     |20      |18      |38      |3       |61      |
*------------------------+--------:--------:--------:--------:--------:--------:
|data.json               |20000   |29      |28      |51      |2       |109     |
*------------------------+--------:--------:--------:--------:--------:--------:
|logout.htm              |200     |4       |4       |7       |2       |10      |
*------------------------+--------:--------:--------:--------:--------:--------:

Out of these the most important are:

*------------------------*--------:
||name                   ||avg(ms)|
*------------------------*--------:
|j_spring_security_check |62      |
*------------------------*--------:
|data.json               |29      |
*------------------------*--------:

* Tuning

 Tuning attempts comprised of:

    * Setting JVM memory parameters to "-server -Xms512m -Xmx512m -XX:NewSize=128m -XX:MaxNewSize=128m -XX:MaxTenuringThreshold=2 -XX:PermSize=64m -XX:MaxPermSize=128m", which made no difference in measurements

    * Setting up constant 10 threads in tomcat thread pool. This made no difference in measurements. Set up only minimal thread number to 10. This had no impact on performance.

    * Rewriting part of login code (password hash evaluation using optimized lookup table and not creating many one-use objects) and data.json code (reusing of a query). Login time shortened to around 50ms, data.json generation time remained the same.

 In general all but one attempt to tune the system did not result in improvements.

* Results

 Overall timing improvements

*------------------------*---------------:--------------:
||name                   ||avg(ms) before||avg(ms) after|
*------------------------*---------------:--------------:
|j_spring_security_check |~60            |~50           |
*------------------------*---------------:--------------:
|data.json               |~30            |~30           |
*------------------------*---------------:--------------:
